{% extends "partials/template.twig" %}

{% block content %}
	<section class="content transaction">
		<div class="row" id="app">
			<div class="col-md-8">
				<div class="box">
					<div class="box-body">
						<select name="search" id="search" ref="search" class="select2 form-control">
							<option></option>
							<option v-for="entity of itemObject" v-bind:value="entity.id">
								${ entity.product_line }
							</option>
						</select>
					</div>
				</div>

				<div class="box" id="cart-block">
					<div class="box-body">
						<table class="table table-bordered table-hover">
							<thead>
								<tr>
									<th>Item Name</th>
									<th>Price</th>
									<th style="width: 15%">Qty.</th>
									<th>Total</th>
									<th></th>
								</tr>
							</thead>

							<tbody>
								<tr v-for="(item, index) in cart">
									<td>${ item.product_line }</td>
									<td>${ item.price }</td>
									<td>
										<input type="text" v-model="item.quantity" id="quantity" ref="quantity" name="quantity" class="form-control" v-on:keyup="updateRow(index)" v-validate="'required|min_value:1|max:6'" autocomplete="off">
										<span v-show="errors.has('quantity')" class="text-danger">${ errors.first('quantity') }</span>
									</td>

									<td>${ item.total }</td>
									<td class="text-center"><i class="fa fa-2x fa-times-circle remove-icon" v-on:click="removeItem(index)"></i</td>
								</tr>
							</tbody>
						</table>
					</div>
				</div>
			</div>

			<div class="col-md-4">
				<form class="form-horizonal" autocomplete="off" id="transaction-form" v-on:submit.prevent="performTransaction">
					<div class="box" id="transaction-block">
						<div class="box-body">
							<div class="col-md-6" style="border-right: 1px solid #d2d6de">
								<h4>Total Amount</h4>
								<h3>${ totalBill }</h3>
							</div>

							<div class="col-md-6">
								<h4>Remaining Amount</h4>
								<h3>${ remainingAmount }</h3>
							</div>

							<div class="col-md-12" style="margin-top: 20px;">
								<div class="form-group">
									<h3>Cash: </h3>
									<input type="text" class="form-control" id="cash" name="cash" ref="cash" v-model="cashAmount" placeholder="0.00" style="height: 50px; font-size: 20px" v-validate="'numeric|required|min_value:1|max:6'" autocomplete="off">
									<span v-show="errors.has('cash')" class="text-danger">${ errors.first('cash') }</span>
								</div>

								<div class="form-group" style="margin-top: 20px;">
									<h3>Change: ${ change }</h3>
								</div>

								<button type="submit" class="btn btn-block btn-flat btn-lg bg-purple">Transact</button>
								<button type="button" v-on:click="clearItems" class="btn btn-block btn-flat btn-lg btn-danger">Clear</button>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</section>
{% endblock %}
{% block script %}
	{{ parent() }}
	{# Select2 #}
	<script src="{{ base_url('resources/template/AdminLTE-2.4.3/bower_components/select2/dist/js/select2.full.min.js') }}"></script>
	{# Vue #}
	<script src="{{ base_url('resources/js/axios/axios.min.js') }}"></script>
	<script src="{{ base_url('resources/js/vue/vue.min.js') }}"></script>
	<script src="{{ base_url('resources/js/lodash/lodash.js') }}"></script>
	<script src="{{ base_url('resources/js/vee-validate/vee-validate.min.js') }}"></script>

	<script type="text/javascript">
		Vue.use(VeeValidate);

		var appUrl = "{{ base_url() }}";

		var app = new Vue({
			el: '#app',
			delimiters: ['${', '}'],
			data: {
				itemObject: [],
				cart: [],
				totalBill: '0.00',
				cashAmount: '',
				remainingAmount: '0.00',
				change: '0.00'

			},
			created() {
				this.fetchItems()
			},
			mounted() {
				const self = this;

				$(this.$refs.search).on('change', function() {
					const id = $(this).val()

					const cartIndex = self.cartIndex(id)

					if ((cartIndex === false)) {
						self.addItem(id)
					}
					else {
						self.updateItem(cartIndex)
					}
				})
			},
			watch: {
				totalBill: function() {
					this.calculateRemainingAmount()
				},
				cashAmount: function() {
					if (!isNaN(this.cashAmount)) {
						this.calculateRemainingAmount()
						this.calculateChange()
					}	
				}
			},
			methods: {
				fetchItems: function() {
					axios.get(appUrl + '/transaction/fetchItems')
					.then((response) => {
						this.itemObject = response.data
					})
					.catch((e) => {
						console.log(e.message)
					})
				},
				searchItem: function(id) {
					for (let [index, row] of this.itemObject.entries())
					{
						if (id == row.id)
						{
							return row
						}
					}

					return false
				},
				cartIndex(id) {
					for (let [index, row] of this.cart.entries())
					{
						if (id == row.id)
						{
							return index
						}
					}

					return false
				},	
				addItem(id) {
					let item = this.searchItem(id)
					if (item != false)
					{
						let format = {
							id: item.id,
							product_line: item.product_line,
							price: item.price,
							quantity: 1,
							total: Number(item.price).toFixed(2)
						}

						this.cart.push(format)
						this.updateTotal()
					}
				},
				removeItem(index) {
					this.cart.splice(index, 1)

					this.updateTotal()
				},
				updateItem(index) {
					this.cart[index].quantity = Number(this.cart[index].quantity) + 1

					this.updateRow(index)
				},
				updateRow(i) {
					this.$validator.validateAll()
					.then((result) => {
						console.log(result)
						if (result == true) {
							this.cart[i].total = Number(this.cart[i].price * this.cart[i].quantity).toFixed(2)

							this.updateTotal();
						}
					})
					
				},
				updateTotal() {
					this.totalBill = (_.chain(this.cart).map('total').map(n => parseFloat(n)).sum().value()).toFixed(2)
				},
				calculateRemainingAmount() {
					let diff = this.totalBill - this.cashAmount
					this.remainingAmount = diff >= 0 ? diff.toFixed(2) : '0.00'
				},
				calculateChange() {
					let diff = this.totalBill - this.cashAmount

					this.change = diff < 0 ? Math.abs(diff).toFixed(2) : '0.00'
					// this.change = diff
				}
			}
		});

		$(document).ready(function() {
			$('select').select2({
				allowClear: true,
				placeholder: {
				   id: "",
				   placeholder: "Leave blank to ..."
				 },
			});
			// $('body').addClass('sidebar-collapse');
		});
	</script>
{% endblock %}